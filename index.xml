<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Anton&#39;s Algorithms</title>
    
    
    
    <link>https://antdon.github.io/algorithms.github.io/</link>
    <description>Recent content on Anton&#39;s Algorithms</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Jun 2022 20:29:10 +1000</lastBuildDate>
    
	<atom:link href="https://antdon.github.io/algorithms.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Minimum Moves to Equal Array Elements II</title>
      <link>https://antdon.github.io/algorithms.github.io/posts/minimum-moves-to-equal-array-elements-ii/</link>
      <pubDate>Thu, 30 Jun 2022 20:29:10 +1000</pubDate>
      
      <guid>https://antdon.github.io/algorithms.github.io/posts/minimum-moves-to-equal-array-elements-ii/</guid>
      <description>
        
          
          
          
        
        
        
          Question: Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.
In one move, you can increment or decrement an element of the array by 1.
Test cases are designed so that the answer will fit in a 32-bit integer.
Example 1:
Input: nums = [1,2,3] Output: 2 Explanation: Only two moves are needed (remember each move increments or decrements one element): [1,2,3] =&amp;gt; [2,2,3] =&amp;gt; [2,2,2]
          
        
        </description>
    </item>
    
    <item>
      <title>Queue Reconstruction By Height</title>
      <link>https://antdon.github.io/algorithms.github.io/posts/queue-reconstruction-by-height/</link>
      <pubDate>Wed, 29 Jun 2022 20:29:10 +1000</pubDate>
      
      <guid>https://antdon.github.io/algorithms.github.io/posts/queue-reconstruction-by-height/</guid>
      <description>
        
          
          
          
        
        
        
          link to question
My original solution from itertools import permutations class Solution: def reconstructQueue(self, people: List[List[int]]) -&amp;gt; List[List[int]]: # length is only 2000 so we can viably just check that it hold and try every perm for permutation in permutations(people): if self.constructed(permutation): return permutation return [] def constructed(self, people: List[List[int]]) -&amp;gt; bool: for index, (person, smaller) in enumerate(people): count = 0 for i in range(index): if people[i][0] &amp;gt;= person: count += 1 if count !
          
        
        </description>
    </item>
    
  </channel>
</rss>